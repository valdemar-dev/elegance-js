var i=class{constructor(){this.stateController=globalThis.eleganceStateController;this.renderer=globalThis.eleganceRenderer;console.log("%cElegance router is loading..","font-size: 30px; color: #aaffaa"),this.savedPages=new Map,this.onNavigateCallbacks=[],this.currentPage=window.location.pathname}log(e){console.log(`%c${e}`,"font-size: 15px; color: #aaffaa")}sleep(e){return new Promise(t=>setTimeout(t,e))}async navigate(e,t=!0){if(!e.startsWith("/"))throw new Error("Elegance router can only navigate to local pages.");this.log("Calling onNavigateCallbacks..");for(let r of this.onNavigateCallbacks)r();this.onNavigateCallbacks=[],this.log("Performing state cleanup.."),this.stateController.resetEphemeralSubjects(),this.stateController.cleanSubjectObservers(),this.log(`Navigating to page: ${e}`);let o=this.savedPages.get(e)??await this.getPage(e);if(!o)throw new Error("Failed to fetch page.");t&&history.pushState(null,"",e),this.currentPage=e,this.renderer.renderPage(o)}async getPage(e){if(this.savedPages.has(e))return;if(!e.startsWith("/"))throw new Error("Elegance router can only fetch local pages.");this.log(`Fetching URL: ${e}`);let t=e==="/"?"":"/",o=await fetch(e);if(!o.ok)throw`Could not load page at ${e}, received HTTP response status ${o.status}. ${o.statusText}`;let r=await o.text(),g=new DOMParser().parseFromString(r,"text/html");try{let{page:a}=await import(e+t+"page.js");if(!a)throw new Error(`Page at ${e} could not be loaded.`);return this.addPage(e,a),a}catch(a){this.log(`Could not load the page at ${e}: ${a}`);return}}addPage(e,t){this.log(`Saving page with pathname: ${e}`),this.savedPages.set(e,t)}async prefetch(e){await this.getPage(e)}onNavigate(e){this.log("Adding onNavigateCallback."),this.onNavigateCallbacks.push(e)}setPopState(){window.onpopstate=e=>{e.preventDefault();let t=window.location.origin,o=e.target;if(o.origin!==t||this.currentPage===o.location.pathname)return;let n=window.location.href.replace(window.location.origin,"");this.navigate(n,!1)}}};var l=class{constructor(){console.log("%cElegance hydrator is loading..","font-size: 30px; color: #ffffaa")}log(e){console.log(`%c${e}`,"font-size: 15px; color: #aaffaa;")}hydratePage(e){let t=e.storedEventListeners,o=performance.now();for(let r of t){let n=document.querySelector(`[e-id="${r.eleganceID}"]`);if(!n)throw`No element with e-id: ${r.eleganceID} found when trying to hydrate page.`;if(!(n instanceof HTMLElement))throw"Only HTML Elements may be hydrated.";for(let g of r.eventListeners){let a=g.attributeName.toLowerCase();n[a]=g.eventListener}}this.log(`Finished hydrating in ${Math.round(performance.now()-o)}ms.`)}};var d=s=>({renderingMethod:s.rm,storedEventListeners:s.sels.map(e=>({eleganceID:e.id,eventListeners:e.els.map(t=>({attributeName:t.an,eventListener:t.el}))}))}),c=globalThis.__ELEGANCE_PAGE_INFO__;if(!c)throw alert("Misconfigured Elegance.JS server, check console."),"globalThis.__ELEGANCE_PAGE_INFO__ is not set, is corrupted, or is set inproperly. Make sure your server configuration sets a <script> with this variable.";var h=d(c);if(h.renderingMethod!==1)throw"The SERVER_SIDE_RENDERING client may only be used if the page has been rendered via the SERVER_SIDE_RENDERING renderingMethod.";var f=new l,y=new i;globalThis.eleganceHydrator=f;f.hydratePage(h);
