var h=c=>{let e;return t=>{clearTimeout(e),e=setTimeout(()=>{t()},c)}};var u=class{constructor(e,t,s=!1,o=null,i="",r=1,n=!1){this.enforceRuntimeTypes=s,this.observers=[],this.value=e,this.initialValue=structuredClone(e),this.id=t,this.pathname=i,this.scope=r,this.resetOnPageLeave=n,o&&(this.debounce=h(o))}observe(e){if(typeof e!="function")throw new Error("The provided callback function must be a function.");if(e.length!==1)throw new Error("The callback function must take one parameter (new value of the subject).");this.observers.push({callback:e})}signal(){let e=async()=>{let t=this.get();for(let s of this.observers)s.callback(t)};this.debounce?this.debounce(e):e()}set(e){if(this.enforceRuntimeTypes&&typeof e!=typeof this.value)throw`Type of new value: ${e} (${typeof e}) does not match the type of this subject's value ${this.value} (${typeof this.value}).`;this.value=e}add(e){if(!Array.isArray(this.value))throw"The add method of a subject may only be used if the subject's value is an Array.";this.value.push(e)}remove(e){if(!Array.isArray(this.value))throw"The remove method of a subject may only be used if the subject's value is an Array.";let t=this.value.indexOf(e);if(!t)throw`Element ${e} does not exist in this subject, therefore it cannot be removed.`;this.value.splice(t,1)}reset(){this.value=this.initialValue}get(){return this.value}getInitialValue(){return this.initialValue}},l=class{constructor(){this.subjectStore=[]}create(e,{id:t,enforceRuntimeTypes:s=!0,debounceUpdateMs:o,resetOnPageLeave:i=!1}){let r=this.subjectStore.find(a=>a.pathname===window.location.pathname&&a.id===t);if(r)return console.info(`%cSubject with ID ${t} already exists, therefore it will not be re-created.`,"font-size: 12px; color: #aaaaff"),r;let n=new u(e,t,s,o,window.location.pathname,1,i);return this.subjectStore.push(n),n}createGlobal(e,{id:t,enforceRuntimeTypes:s=!0,debounceUpdateMs:o,resetOnPageLeave:i=!1}){let r=this.subjectStore.find(a=>a.scope===2&&a.id===t);if(r)return console.info(`%cGlobal Subject with ID ${t} already exists, therefore it will not be re-created.`,"font-size: 12px; color: #aaaaff"),r;let n=new u(e,t,s,o,"",2,i);return this.subjectStore.push(n),n}getGlobal(e){let t=this.subjectStore.find(s=>s.scope===2&&s.id===e);if(!t)throw new Error(`Could not find a global subject with the ID of ${e}.`);return t}get(e){let t=this.subjectStore.find(s=>s.pathname===window.location.pathname&&s.id===e);if(!t)throw new Error(`Could not find a subject with the ID of ${e} in the page ${window.location.pathname}`);return t}observe(e,t,s=1){s===1?this.get(e).observe(t):this.getGlobal(e).observe(t)}resetEphemeralSubjects(){this.subjectStore=this.subjectStore.filter(e=>e.resetOnPageLeave===!1)}cleanSubjectObservers(){for(let e of this.subjectStore)e.observers=[]}};export{l as StateController};
