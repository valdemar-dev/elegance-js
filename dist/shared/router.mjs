var g=class{constructor(){this.stateController=globalThis.eleganceStateController;this.renderer=globalThis.eleganceRenderer;console.log("%cElegance router is loading..","font-size: 30px; color: #aaffaa"),this.savedPages=new Map,this.onNavigateCallbacks=[],this.currentPage=window.location.pathname}log(e){console.log(`%c${e}`,"font-size: 15px; color: #aaffaa")}sleep(e){return new Promise(a=>setTimeout(a,e))}async navigate(e,a=!0){if(!e.startsWith("/"))throw new Error("Elegance router can only navigate to local pages.");this.log("Calling onNavigateCallbacks..");for(let r of this.onNavigateCallbacks)r();this.onNavigateCallbacks=[],this.log("Performing state cleanup.."),this.stateController.resetEphemeralSubjects(),this.stateController.cleanSubjectObservers(),this.log(`Navigating to page: ${e}`);let t=this.savedPages.get(e)??await this.getPage(e);if(!t)throw new Error("Failed to fetch page.");a&&history.pushState(null,"",e),this.currentPage=e,this.renderer.renderPage(t)}async getPage(e){if(this.savedPages.has(e))return;if(!e.startsWith("/"))throw new Error("Elegance router can only fetch local pages.");this.log(`Fetching URL: ${e}`);let a=e==="/"?"":"/",t=await fetch(e);if(!t.ok)throw`Could not load page at ${e}, received HTTP response status ${t.status}. ${t.statusText}`;let r=await t.text(),n=new DOMParser().parseFromString(r,"text/html").querySelector("script[e-pi]");if(!n){this.log(`Failed to fatch page, page ${e} did not define a <script> in it's head with attribute e-ip (short for elegancePageInfo)`);return}let s=document.createElement("script");s.textContent=n.textContent,document.head.appendChild(s),console.log(globalThis.__PAGE_INFOS__);return;try{let{page:o}=await import(e+a+"page.js");if(!o)throw new Error(`Page at ${e} could not be loaded.`);return this.addPage(e,o),o}catch(o){this.log(`Could not load the page at ${e}: ${o}`);return}}addPage(e,a){this.log(`Saving page with pathname: ${e}`),this.savedPages.set(e,a)}onNavigate(e){this.log("Adding onNavigateCallback."),this.onNavigateCallbacks.push(e)}setPopState(){window.onpopstate=e=>{e.preventDefault();let a=window.location.origin,t=e.target;if(t.origin!==a||this.currentPage===t.location.pathname)return;let i=window.location.href.replace(window.location.origin,"");this.navigate(i,!1)}}};export{g as Router};
