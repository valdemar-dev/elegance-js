var i=class{constructor(){this.stateController=globalThis.eleganceStateController;this.renderer=globalThis.eleganceRenderer;console.log("%cElegance router is loading..","font-size: 30px; color: #aaffaa"),this.savedPages=new Map,this.onNavigateCallbacks=[],this.currentPage=window.location.pathname}log(t){console.log(`%c${t}`,"font-size: 15px; color: #aaffaa")}sleep(t){return new Promise(a=>setTimeout(a,t))}async navigate(t,a=!0){if(!t.startsWith("/"))throw new Error("Elegance router can only navigate to local pages.");this.log("Calling onNavigateCallbacks..");for(let r of this.onNavigateCallbacks)r();this.onNavigateCallbacks=[],this.log("Performing state cleanup.."),this.stateController.resetEphemeralSubjects(),this.stateController.cleanSubjectObservers(),this.log(`Navigating to page: ${t}`);let e=this.savedPages.get(t)??await this.getPage(t);if(!e)throw new Error("Failed to fetch page.");a&&history.pushState(null,"",t),this.currentPage=t,this.renderer.renderPage(e)}async getPage(t){if(this.savedPages.has(t))return;if(!t.startsWith("/"))throw new Error("Elegance router can only fetch local pages.");this.log(`Fetching URL: ${t}`);let a=t==="/"?"":"/",e=await fetch(t);if(!e.ok)throw`Could not load page at ${t}, received HTTP response status ${e.status}. ${e.statusText}`;let r=await e.text(),g=new DOMParser().parseFromString(r,"text/html");try{let{page:o}=await import(t+a+"page.js");if(!o)throw new Error(`Page at ${t} could not be loaded.`);return this.addPage(t,o),o}catch(o){this.log(`Could not load the page at ${t}: ${o}`);return}}addPage(t,a){this.log(`Saving page with pathname: ${t}`),this.savedPages.set(t,a)}async prefetch(t){await this.getPage(t)}onNavigate(t){this.log("Adding onNavigateCallback."),this.onNavigateCallbacks.push(t)}setPopState(){window.onpopstate=t=>{t.preventDefault();let a=window.location.origin,e=t.target;if(e.origin!==a||this.currentPage===e.location.pathname)return;let s=window.location.href.replace(window.location.origin,"");this.navigate(s,!1)}}};export{i as Router};
