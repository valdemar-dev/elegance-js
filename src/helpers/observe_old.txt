class PropertyObserver {
    ids: { [id: string]: "local" | "global", };
    update: (...args: any) => string | Record<string, any>;

    constructor({
        ids,
        update, 
    }: {
        ids: { [id: string]: "local" | "global", },
        update: (...arg: any) => string
    }) {
        if (
            !ids || 
            !update
        ) throw new Error("Invalid function invocation, must provide ids, scope and update function.");

        if (typeof update !== "function") {
            throw new Error(`Provided update function has type ${typeof update}, which is not a function.`);
        }

        if (update.length !== Object.keys(ids).length) {
            throw new Error(`The length of the parameters for the update function (${update.length}) does not match the length of the provided IDs (${Object.keys(ids).length})`);
        }

        this.ids = ids;
        this.update = update;
    }
}

const observe = ({
    ids,
    update, 
}: {
    ids: { [id: string]: "local" | "global", },
    update: (...arg: any) => string
}) => new PropertyObserver({ ids, update });

export { PropertyObserver };
export { observe }
